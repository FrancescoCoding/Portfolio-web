{"version":3,"file":"static/js/877.a5ece1ec.chunk.js","mappings":"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","sources":["webpack://francesco-gruosso-portfolio/./src/components/content/ProjectsContent.module.css?4990","components/content/ProjectsContent.jsx","pages/Projects.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"projects-section\":\"ProjectsContent_projects-section__3lk3-\",\"appear\":\"ProjectsContent_appear__JqdVQ\",\"projects\":\"ProjectsContent_projects__35bLc\",\"filter-container\":\"ProjectsContent_filter-container__caR7P\",\"filter-wrapper\":\"ProjectsContent_filter-wrapper__H94Tn\",\"items\":\"ProjectsContent_items__d89lH\",\"list-item\":\"ProjectsContent_list-item__8fLxw\",\"image-container\":\"ProjectsContent_image-container__5SU-o\",\"title-container\":\"ProjectsContent_title-container__q1Vql\",\"magenta\":\"ProjectsContent_magenta__wobMR\",\"ocean\":\"ProjectsContent_ocean__r3IT+\",\"canary\":\"ProjectsContent_canary__VUiFJ\",\"leaf\":\"ProjectsContent_leaf__OY0iw\",\"short\":\"ProjectsContent_short__eUzfv\",\"project-git\":\"ProjectsContent_project-git__Rj9j7\",\"git\":\"ProjectsContent_git__dgGl-\",\"github\":\"ProjectsContent_github__snQib\",\"description\":\"ProjectsContent_description__+AtgD\",\"projects-section-mobile\":\"ProjectsContent_projects-section-mobile__Wzu9S\",\"items-mobile\":\"ProjectsContent_items-mobile__WNd2W\",\"middle-item\":\"ProjectsContent_middle-item__awDaC\",\"leaf-hover\":\"ProjectsContent_leaf-hover__uhjj5\",\"magenta-hover\":\"ProjectsContent_magenta-hover__BgzxY\",\"canary-hover\":\"ProjectsContent_canary-hover__qtPJN\",\"ocean-hover\":\"ProjectsContent_ocean-hover__laKUh\"};","import styles from \"./ProjectsContent.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { FaGithub } from \"react-icons/fa\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { isMobile } from \"react-device-detect\";\r\n\r\nconst stripEmojis = (text) => {\r\n  const regex = /\\p{Emoji_Presentation}/gu;\r\n  return text.replace(regex, \"\");\r\n};\r\n\r\nconst sortProjects = (projects, order, storeLanguage) => {\r\n  return [...projects].sort((a, b) => {\r\n    if (order === \"name\") {\r\n      const nameA = stripEmojis(a[storeLanguage].name.toUpperCase());\r\n      const nameB = stripEmojis(b[storeLanguage].name.toUpperCase());\r\n      return nameA.localeCompare(nameB);\r\n    } else {\r\n      // default to sorting by 'order' property\r\n      return a.order - b.order;\r\n    }\r\n  });\r\n};\r\n\r\nconst ProjectsContent = (props) => {\r\n  const storeLanguage = useSelector((state) => state.languages.language);\r\n  const storeColour = useSelector((state) => state.colours);\r\n\r\n  const isMediumScreen = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n  const isSmallScreen = useMediaQuery({ query: \"(max-width: 870px)\" });\r\n\r\n  const smallScreenPadding = isSmallScreen ? \"8px\" : \"16px\";\r\n\r\n  // Load the user's sorting preference from local storage, or default to \"order\"\r\n  const savedOrder = localStorage.getItem(\"sortingOrder\") || \"order\";\r\n\r\n  // create filter state\r\n  const [order, setOrder] = useState(savedOrder);\r\n  const [sortedProjects, setSortedProjects] = useState(props.projects);\r\n\r\n  useEffect(() => {\r\n    setSortedProjects(sortProjects(props.projects, order, storeLanguage));\r\n  }, [props.projects, order, storeLanguage]);\r\n\r\n  // Save the user's sorting preference to local storage\r\n  const handleOrderChange = (e) => {\r\n    const newOrder = e.target.value;\r\n    setOrder(newOrder);\r\n\r\n    // Save the user's sorting preference to local storage\r\n    localStorage.setItem(\"sortingOrder\", newOrder);\r\n  };\r\n\r\n  const stopEvent = (event) => event.stopPropagation();\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={\r\n          isMobile\r\n            ? styles[\"projects-section-mobile\"]\r\n            : styles[\"projects-section\"]\r\n        }>\r\n        <div className={styles.projects}>\r\n          <div\r\n            className={`${\r\n              isMobile ? styles[\"items-mobile\"] : styles[\"items\"]\r\n            } ${styles[`${storeColour.colour}`]}`}\r\n            style={{ paddingRight: smallScreenPadding }}>\r\n            {sortedProjects.map((project) => {\r\n              return (\r\n                <div\r\n                  className={styles[\"project-git\"]}\r\n                  key={project.id + \"git\"}>\r\n                  <Link\r\n                    key={project.id}\r\n                    to={`/projects/${project.endpoint}`}\r\n                    className={styles[\"list-container\"]}>\r\n                    <div\r\n                      className={`${styles[\"list-item\"]} ${\r\n                        styles[`${storeColour.colour}`]\r\n                      }`}\r\n                      style={{\r\n                        background: isMediumScreen\r\n                          ? `linear-gradient(rgba(0,0,0,0.75), rgba(0,0,0,0.75)), url(${project.image}) no-repeat center center/cover`\r\n                          : `linear-gradient(rgba(0,0,0,0.45), rgba(0,0,0,0.65)), url(${project.image}) no-repeat center center/cover`,\r\n                      }}>\r\n                      {!isMobile && (\r\n                        <div className={styles[\"image-container\"]}>\r\n                          <img\r\n                            src={project.image}\r\n                            alt={project.name}\r\n                          />\r\n                        </div>\r\n                      )}\r\n                      <div className={styles[\"title-container\"]}>\r\n                        <p>{project[`${storeLanguage}`].name}</p>\r\n                        <p className={styles.short}>\r\n                          {\" \"}\r\n                          {project[`${storeLanguage}`].short}{\" \"}\r\n                        </p>\r\n                      </div>\r\n                      {isMediumScreen && (\r\n                        <a\r\n                          rel=\"noreferrer\"\r\n                          href={project.githubLink}\r\n                          onClick={stopEvent}\r\n                          target=\"_blank\"\r\n                          aria-label={project[`${storeLanguage}`].name}>\r\n                          <FaGithub\r\n                            className={`${styles.git} ${styles.github}`}\r\n                            color=\"white\"\r\n                          />\r\n                        </a>\r\n                      )}\r\n                    </div>\r\n                  </Link>\r\n\r\n                  {isMediumScreen && (\r\n                    <div className={styles.description}>\r\n                      <p className={` ${styles.short}`}>\r\n                        {project[`${storeLanguage}`].short}\r\n                      </p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className={styles[\"filter-container\"]}>\r\n            <div\r\n              className={styles[\"filter-wrapper\"]}\r\n              style={{\r\n                borderColor: `${storeColour.hex}`,\r\n              }}>\r\n              <select\r\n                name=\"filter\"\r\n                id=\"filter\"\r\n                value={order}\r\n                onChange={handleOrderChange}>\r\n                {/* @todo: do proper internationalisation */}\r\n                <option value=\"order\">\r\n                  {storeLanguage === \"EN\" ? \"Featured\" : \"In evidenza\"}\r\n                </option>\r\n                <option value=\"name\">\r\n                  {storeLanguage === \"EN\" ? \"Name\" : \"Nome\"}\r\n                </option>\r\n                {/* <option value=\"order\">Date</option> */}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectsContent;\r\n","import Transition from \"../components/UI/Transition\";\r\nimport Navbar from \"../components/UI/Navbar\";\r\nimport ProjectsContent from \"../components/content/ProjectsContent\";\r\nimport ProjectsList from \"../settings/WorksList\";\r\n// import Sidebar from \"../components/UI/Sidebar\";\r\n// import { AnimatedArrow } from \"../assets/Animations/Animations\";\r\nimport ColourSelector from \"../components/UI/ColourSelector\";\r\nimport VolumeControl from \"../components/UI/VolumeControl\";\r\n\r\nconst Projects = () => {\r\n  return (\r\n    <>\r\n      <Transition reverse />\r\n      <VolumeControl />\r\n      <Navbar />\r\n      <ColourSelector />\r\n      <ProjectsContent projects={ProjectsList} />\r\n      {/* <Sidebar concatContent={<AnimatedArrow />} /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n"],"names":["stripEmojis","text","replace","props","storeLanguage","useSelector","state","languages","language","storeColour","colours","isMediumScreen","useMediaQuery","query","smallScreenPadding","savedOrder","localStorage","getItem","useState","order","setOrder","projects","sortedProjects","setSortedProjects","useEffect","sort","a","b","nameA","name","toUpperCase","nameB","localeCompare","sortProjects","stopEvent","event","stopPropagation","className","isMobile","styles","colour","style","paddingRight","map","project","to","endpoint","background","image","src","alt","short","rel","href","githubLink","onClick","target","color","id","borderColor","hex","value","onChange","e","newOrder","setItem","Transition","reverse","VolumeControl","Navbar","ColourSelector","ProjectsList"],"sourceRoot":""}